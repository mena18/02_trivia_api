{"ast":null,"code":"var _jsxFileName = \"/home/mina/Desktop/Projects/in progress Projects/02_trivia_api/frontend/src/components/QuestionView.js\";\nimport React, { Component } from 'react';\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor() {\n    super();\n\n    this.getQuestions = () => {\n      $.ajax({\n        url: \"http://127.0.0.1:5000/questions?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          console.log(\"success\");\n          let categories = {};\n\n          for (let i = 0; i < result.categories.length; i++) {\n            categories[result.categories[i].id] = result.categories[i].type;\n          }\n\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            categories: categories,\n            currentCategory: result.current_category\n          });\n          console.log(this.state.categories);\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions . Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.getByCategory = id => {\n      $.ajax({\n        url: \"http://127.0.0.1:5000/categories/\".concat(id, \"/questions\"),\n        //TODO: update request URL\n        type: \"GET\",\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions . Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.submitSearch = searchTerm => {\n      console.log(\"Search : \", searchTerm);\n      $.ajax({\n        url: \"http://127.0.0.1:5000/questions/search?page=\".concat(this.state.page),\n        //TODO: update request URL\n        type: \"POST\",\n        dataType: 'json',\n        contentType: 'application/json',\n        data: JSON.stringify({\n          searchTerm: searchTerm\n        }),\n        // xhrFields: {\n        //   withCredentials: true\n        // },\n        // crossDomain: true,\n        success: result => {\n          this.setState({\n            questions: result.questions,\n            totalQuestions: result.total_questions,\n            currentCategory: result.current_category\n          });\n          return;\n        },\n        error: error => {\n          alert('Unable to load questions . Please try your request again');\n          return;\n        }\n      });\n    };\n\n    this.questionAction = id => action => {\n      if (action === 'DELETE') {\n        if (window.confirm('are you sure you want to delete the question?')) {\n          $.ajax({\n            url: \"http://127.0.0.1:5000//questions/\".concat(id),\n            //TODO: update request URL\n            type: \"DELETE\",\n            success: result => {\n              this.getQuestions();\n            },\n            error: error => {\n              alert('Unable to load questions . Please try your request again');\n              return;\n            }\n          });\n        }\n      }\n    };\n\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null\n    };\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  selectPage(num) {\n    this.setState({\n      page: num\n    }, () => this.getQuestions());\n  }\n\n  createPagination() {\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10);\n\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(React.createElement(\"span\", {\n        key: i,\n        className: \"page-num \".concat(i === this.state.page ? 'active' : ''),\n        onClick: () => {\n          this.selectPage(i);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      }, i));\n    }\n\n    return pageNumbers;\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"question-view\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"categories-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      onClick: () => {\n        this.getQuestions();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }, \"Categories\"), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, Object.keys(this.state.categories).map(id => React.createElement(\"li\", {\n      key: id,\n      onClick: () => {\n        this.getByCategory(id);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, this.state.categories[id], React.createElement(\"img\", {\n      className: \"category\",\n      src: \"\".concat(this.state.categories[id].toLowerCase(), \".svg\"),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    })))), React.createElement(Search, {\n      submitSearch: this.submitSearch,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 154\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"questions-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }, React.createElement(\"h2\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 157\n      },\n      __self: this\n    }, \"Questions\"), this.state.questions.map((q, ind) => React.createElement(Question, {\n      key: q.id,\n      question: q.question,\n      answer: q.answer,\n      category: this.state.categories[q.category],\n      difficulty: q.difficulty,\n      questionAction: this.questionAction(q.id),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      className: \"pagination-menu\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, this.createPagination())));\n  }\n\n}\n\nexport default QuestionView;","map":{"version":3,"sources":["/home/mina/Desktop/Projects/in progress Projects/02_trivia_api/frontend/src/components/QuestionView.js"],"names":["React","Component","Question","Search","$","QuestionView","constructor","getQuestions","ajax","url","state","page","type","success","result","console","log","categories","i","length","id","setState","questions","totalQuestions","total_questions","currentCategory","current_category","error","alert","getByCategory","submitSearch","searchTerm","dataType","contentType","data","JSON","stringify","questionAction","action","window","confirm","componentDidMount","selectPage","num","createPagination","pageNumbers","maxPage","Math","ceil","push","render","Object","keys","map","toLowerCase","q","ind","question","answer","category","difficulty"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\n\nimport '../stylesheets/App.css';\nimport Question from './Question';\nimport Search from './Search';\nimport $ from 'jquery';\n\nclass QuestionView extends Component {\n  constructor(){\n    super();\n    this.state = {\n      questions: [],\n      page: 1,\n      totalQuestions: 0,\n      categories: {},\n      currentCategory: null,\n    }\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n  }\n\n  getQuestions = () => {\n    $.ajax({\n      url: `http://127.0.0.1:5000/questions?page=${this.state.page}`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        console.log(\"success\")\n        let categories={}\n        for(let i=0;i<result.categories.length;i++){\n          categories[result.categories[i].id] = result.categories[i].type\n        }\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          categories: categories,\n          currentCategory: result.current_category })\n        console.log(this.state.categories)\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions . Please try your request again')\n        return;\n      }\n    })\n  }\n\n  selectPage(num) {\n    this.setState({page: num}, () => this.getQuestions());\n  }\n\n  createPagination(){\n    let pageNumbers = [];\n    let maxPage = Math.ceil(this.state.totalQuestions / 10)\n    for (let i = 1; i <= maxPage; i++) {\n      pageNumbers.push(\n        <span\n          key={i}\n          className={`page-num ${i === this.state.page ? 'active' : ''}`}\n          onClick={() => {this.selectPage(i)}}>{i}\n        </span>)\n    }\n    return pageNumbers;\n  }\n\n  getByCategory= (id) => {\n    $.ajax({\n      url: `http://127.0.0.1:5000/categories/${id}/questions`, //TODO: update request URL\n      type: \"GET\",\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions . Please try your request again')\n        return;\n      }\n    })\n  }\n\n  submitSearch = (searchTerm) => {\n    console.log(\"Search : \",searchTerm)\n    $.ajax({\n      url: `http://127.0.0.1:5000/questions/search?page=${this.state.page}`, //TODO: update request URL\n      type: \"POST\",\n      dataType: 'json',\n      contentType: 'application/json',\n      data: JSON.stringify({searchTerm: searchTerm}),\n      \n      // xhrFields: {\n      //   withCredentials: true\n      // },\n      // crossDomain: true,\n      success: (result) => {\n        this.setState({\n          questions: result.questions,\n          totalQuestions: result.total_questions,\n          currentCategory: result.current_category })\n        return;\n      },\n      error: (error) => {\n        alert('Unable to load questions . Please try your request again')\n        return;\n      }\n    })\n  }\n\n\n  // get_cat(id){\n  //   for(let i=0;i<this.state.categories.length;i++){\n  //     if(this.state.categories[i].id == id){\n  //       return this.state.categories[i];\n  //     }\n  //   }\n  // }\n\n  questionAction = (id) => (action) => {\n    if(action === 'DELETE') {\n      if(window.confirm('are you sure you want to delete the question?')) {\n        $.ajax({\n          url: `http://127.0.0.1:5000//questions/${id}`, //TODO: update request URL\n          type: \"DELETE\",\n          success: (result) => {\n            this.getQuestions();\n          },\n          error: (error) => {\n            alert('Unable to load questions . Please try your request again')\n            return;\n          }\n        })\n      }\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"question-view\">\n        <div className=\"categories-list\">\n          <h2 onClick={() => {this.getQuestions()}}>Categories</h2>\n          <ul>\n            {/* replacing object.keys because i want to display the category */}\n            {/*  */}\n            {Object.keys(this.state.categories).map((id) => (\n              <li key={id} onClick={() => {this.getByCategory(id)}}>\n                {this.state.categories[id]}\n                <img className=\"category\" src={`${this.state.categories[id].toLowerCase()}.svg`}/>\n              </li>\n            ))}\n          </ul>\n          <Search submitSearch={this.submitSearch}/>\n        </div>\n        <div className=\"questions-list\">\n          <h2>Questions</h2>\n          {this.state.questions.map((q, ind) => (\n            <Question\n              key={q.id}\n              question={q.question}\n              answer={q.answer}\n              category={this.state.categories[q.category]} \n              difficulty={q.difficulty}\n              questionAction={this.questionAction(q.id)}\n            />\n          ))}\n          <div className=\"pagination-menu\">\n            {this.createPagination()}\n          </div>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default QuestionView;\n"]},"metadata":{},"sourceType":"module"}